// 该文件 `lib.rs` 是 `arb-common` crate (库) 的根文件。
// "crate" 是Rust中的一个编译单元，可以是一个库 (library) 或一个可执行程序 (binary)。
// `arb-common` 这个名称暗示它可能包含一些在套利机器人项目 (`arb` binary)
// 和其他相关项目或模块之间共享的通用代码、数据结构或工具函数。
//
// 文件概览:
// 当前这个文件非常简单，只包含：
// 1. `add()` 函数: 一个简单的公共函数，将两个 `u64` (64位无符号整数) 相加并返回结果。
//    这很可能是一个占位符函数，或者是一个用于演示或测试 crate 设置的初始函数。
// 2. `tests` 模块: 一个内联的测试模块，包含一个单元测试 `it_works()`，用于验证 `add()` 函数的功能。
//
// 预期用途:
// 尽管当前内容很少，但 `arb-common` crate 的目标可能是：
// - 定义通用的数据结构 (例如，表示交易对、价格、订单等的结构体)。
// - 提供共享的工具函数 (例如，数学计算、类型转换、错误处理辅助等)。
// - 包含在多个项目中都需要用到的常量或配置。
// 通过将这些通用组件提取到一个单独的库中，可以提高代码的复用性、模块化和可维护性。

/// `add` 函数
///
/// 一个简单的公共函数，接收两个 `u64` 类型的参数 `left` 和 `right`，
/// 并返回它们的和。
///
/// 参数:
/// - `left`: 第一个加数 (u64类型)。
/// - `right`: 第二个加数 (u64类型)。
///
/// 返回:
/// - `u64`: `left` 和 `right` 的和。
pub fn add(left: u64, right: u64) -> u64 {
    left + right // 执行加法运算并返回结果
}

// --- 测试模块 (`tests`) ---
// `#[cfg(test)]` 属性宏表示这部分代码仅在执行 `cargo test` 命令时编译和包含。
// 这个模块用于编写单元测试，以验证库中函数的正确性。
#[cfg(test)]
mod tests {
    use super::*; // `use super::*;` 语句将外部模块 (即 `arb-common` crate 本身) 的所有公共成员导入到测试模块的作用域中，
                  // 使得可以直接调用像 `add()` 这样的函数。

    /// `it_works` 测试函数
    ///
    /// 这是一个简单的单元测试，用于验证 `add()` 函数是否按预期工作。
    /// `#[test]` 属性宏标记这个函数为一个测试用例。
    #[test]
    fn it_works() {
        let result = add(2, 2); // 调用 add 函数
        // `assert_eq!` 宏用于断言两个值是否相等。
        // 如果 `result` 不等于 `4`，测试将会失败，并打印错误信息。
        assert_eq!(result, 4, "2 + 2 应该等于 4");
    }
}
